'use client';

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Award, Code, Shield, Wifi, Database, Smartphone, X, ChevronRight } from 'lucide-react';

export default function ExploitGallery() {
  const [selectedExploit, setSelectedExploit] = useState<string | null>(null);

  const exploits = [
    {
      id: 'mitm',
      title: 'Man-in-the-Middle Attack',
      category: 'Network Security',
      icon: <Wifi className="w-6 h-6" />,
      difficulty: 'Advanced',
      tools: ['Wireshark', 'Ettercap', 'SSLstrip'],
      description: 'Intercepted network traffic between client and server using ARP spoofing',
      mitigation: `# MITM Prevention
# Enable HTTPS Strict Transport Security
app.use(helmet.hsts({
  maxAge: 31536000,
  includeSubDomains: true,
  preload: true
}));

# Certificate pinning
const options = {
  hostname: 'api.example.com',
  port: 443,
  path: '/',
  method: 'GET',
  checkServerIdentity: (host, cert) => {
    const expectedFingerprint = 'AA:BB:CC...';
    if (cert.fingerprint !== expectedFingerprint) {
      throw new Error('Certificate mismatch');
    }
  }
};`,
      results: [
        'Successfully intercepted 127 HTTP requests',
        'Captured 23 login credentials',
        'Demonstrated SSL stripping vulnerability',
        'Recorded session tokens and cookies'
      ]
    },
    {
      id: 'sqli',
      title: 'SQL Injection',
      category: 'Web Application',
      icon: <Database className="w-6 h-6" />,
      difficulty: 'Intermediate',
      tools: ['Burp Suite', 'SQLmap', 'Custom Scripts'],
      description: 'Exploited vulnerable login form to extract database contents',
      mitigation: `# SQL Injection Prevention
# Use parameterized queries
cursor.execute(
    "SELECT * FROM users WHERE id = %s AND status = %s", 
    (user_id, status)
)

# Input validation
def validate_input(user_input):
    if not re.match("^[a-zA-Z0-9_]+$", user_input):
        raise ValueError("Invalid input format")
    return user_input

# Use ORM with built-in protection
user = User.objects.filter(id=user_id).first()`,
      results: [
        'Extracted 1,247 user records',
        'Retrieved admin credentials',
        'Accessed sensitive customer data',
        'Demonstrated privilege escalation'
      ]
    },
    {
      id: 'mobile',
      title: 'Mobile App Exploitation',
      category: 'Mobile Security',
      icon: <Smartphone className="w-6 h-6" />,
      difficulty: 'Expert',
      tools: ['Metasploit', 'Frida', 'APKTool'],
      description: 'Reverse engineered Android app and exploited insecure data storage',
      mitigation: `# Mobile Security Best Practices
# Secure data storage
SharedPreferences prefs = getSharedPreferences(
    "secure_prefs", 
    Context.MODE_PRIVATE
);
SharedPreferences.Editor editor = prefs.edit();
editor.putString("token", encryptData(token));
editor.apply();

# Certificate pinning
CertificatePinner certificatePinner = new CertificatePinner.Builder()
    .add("api.example.com", "sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=")
    .build();

# Root detection
if (RootBeer.isRooted(context)) {
    // Handle rooted device
    throw new SecurityException("Rooted device detected");
}`,
      results: [
        'Bypassed root detection mechanisms',
        'Extracted API keys from app binary',
        'Intercepted encrypted communications',
        'Demonstrated runtime manipulation'
      ]
    }
  ];

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'Beginner': return 'bg-green-500/20 text-green-400';
      case 'Intermediate': return 'bg-yellow-500/20 text-yellow-400';
      case 'Advanced': return 'bg-orange-500/20 text-orange-400';
      case 'Expert': return 'bg-red-500/20 text-red-400';
      default: return 'bg-slate-500/20 text-slate-400';
    }
  };

  return (
    <div className="p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-2xl font-bold text-white">Security Testing Gallery</h3>
        <Button variant="ghost" size="sm" onClick={() => {}}>
          <X className="w-4 h-4" />
        </Button>
      </div>

      {!selectedExploit ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {exploits.map((exploit, index) => (
            <motion.div
              key={exploit.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
            >
              <Card 
                className="bg-slate-800/50 border-slate-700 hover:border-rose-400/50 transition-all duration-300 cursor-pointer h-full"
                onClick={() => setSelectedExploit(exploit.id)}
              >
                <CardHeader>
                  <div className="flex items-center gap-3 mb-2">
                    <div className="p-2 bg-rose-500/20 rounded-lg text-rose-400">
                      {exploit.icon}
                    </div>
                    <div className="flex-1">
                      <CardTitle className="text-white text-lg">{exploit.title}</CardTitle>
                      <p className="text-sm text-slate-400">{exploit.category}</p>
                    </div>
                    <ChevronRight className="w-5 h-5 text-slate-400" />
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-slate-300 text-sm">{exploit.description}</p>
                  
                  <div className="flex items-center justify-between">
                    <Badge 
                      variant="secondary" 
                      className={getDifficultyColor(exploit.difficulty)}
                    >
                      {exploit.difficulty}
                    </Badge>
                    <div className="flex items-center gap-1">
                      <Award className="w-4 h-4 text-yellow-400" />
                      <span className="text-xs text-slate-400">Verified</span>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <p className="text-xs text-slate-400 font-semibold">Tools Used:</p>
                    <div className="flex flex-wrap gap-1">
                      {exploit.tools.map((tool) => (
                        <Badge key={tool} variant="outline" className="text-xs border-slate-600 text-slate-300">
                          {tool}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </div>
      ) : (
        <AnimatePresence>
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
          >
            {(() => {
              const exploit = exploits.find(e => e.id === selectedExploit);
              if (!exploit) return null;

              return (
                <div className="space-y-6">
                  {/* Header */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-4">
                      <div className="p-3 bg-rose-500/20 rounded-lg text-rose-400">
                        {exploit.icon}
                      </div>
                      <div>
                        <h4 className="text-2xl font-bold text-white">{exploit.title}</h4>
                        <p className="text-slate-400">{exploit.category}</p>
                      </div>
                    </div>
                    <Button
                      variant="outline"
                      onClick={() => setSelectedExploit(null)}
                      className="border-slate-600 text-slate-300 hover:bg-slate-800"
                    >
                      Back to Gallery
                    </Button>
                  </div>

                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {/* Test Results */}
                    <Card className="bg-slate-800/50 border-slate-700">
                      <CardHeader>
                        <CardTitle className="text-rose-400">Test Results</CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div className="flex items-center justify-between">
                          <span className="text-slate-300">Difficulty Level</span>
                          <Badge className={getDifficultyColor(exploit.difficulty)}>
                            {exploit.difficulty}
                          </Badge>
                        </div>

                        <div className="space-y-2">
                          <h5 className="font-semibold text-slate-300">Key Findings:</h5>
                          <ul className="space-y-2">
                            {exploit.results.map((result, index) => (
                              <li key={index} className="flex items-start gap-2 text-sm">
                                <div className="w-2 h-2 bg-rose-400 rounded-full mt-2 flex-shrink-0"></div>
                                <span className="text-slate-300">{result}</span>
                              </li>
                            ))}
                          </ul>
                        </div>

                        <div className="space-y-2">
                          <h5 className="font-semibold text-slate-300">Tools Used:</h5>
                          <div className="flex flex-wrap gap-2">
                            {exploit.tools.map((tool) => (
                              <Badge key={tool} variant="outline" className="border-slate-600 text-slate-300">
                                {tool}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    {/* Mitigation Code */}
                    <Card className="bg-slate-900 border-slate-700">
                      <CardHeader>
                        <div className="flex items-center gap-2">
                          <Shield className="w-5 h-5 text-green-400" />
                          <CardTitle className="text-green-400">Mitigation Code</CardTitle>
                        </div>
                      </CardHeader>
                      <CardContent>
                        <pre className="text-sm text-slate-300 overflow-x-auto whitespace-pre-wrap font-mono bg-black p-4 rounded-lg">
                          {exploit.mitigation}
                        </pre>
                      </CardContent>
                    </Card>
                  </div>

                  {/* Description */}
                  <Card className="bg-slate-800/30 border-slate-700">
                    <CardContent className="pt-6">
                      <div className="flex items-start gap-3">
                        <Code className="w-5 h-5 text-cyan-400 mt-1 flex-shrink-0" />
                        <div>
                          <h5 className="font-semibold text-cyan-400 mb-2">Exploitation Details</h5>
                          <p className="text-slate-300 leading-relaxed">{exploit.description}</p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              );
            })()}
          </motion.div>
        </AnimatePresence>
      )}
    </div>
  );
}
